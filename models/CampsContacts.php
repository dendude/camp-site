<?php
namespace app\models;

use Yii;
use yii\db\ActiveRecord;
use app\helpers\Normalize;
use app\models\queries\CampsContactsQuery;
use yii\helpers\Json;

/**
 * This is the model class for table "{{%camps_contacts}}".
 *
 * @property integer $id
 * @property integer $camp_id
 * @property string $boss_fio
 * @property string $boss_phone
 * @property string $boss_email
 * @property string $worker_fio
 * @property string $worker_phone
 * @property string $worker_email
 * @property string $notif_order_emails
 * @property string $notif_order_phone
 * @property string $office_phone
 * @property string $office_mobile
 * @property string $office_address
 * @property string $office_route
 * @property string $office_coords
 * @property string $social_vk
 * @property string $social_ok
 * @property string $social_fb
 * @property string $social_ig
 * @property string $site_url
 */
class CampsContacts extends ActiveRecord
{
    const SCENARIO_ADMIN = 'admin';
    
    public $notif_order_emails_f = [];
    
    // данные геопозиции объекта, по умолчанию Москва
    public $office_coords_f = ['lat' => 55.76, 'lng' => 37.64, 'zoom' => 12];
    
    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios[self::SCENARIO_ADMIN] = $scenarios[self::SCENARIO_DEFAULT];
        
        return parent::scenarios();
    }

    public static function tableName()
    {
        return '{{%camps_contacts}}';
    }

    public function rules()
    {
        return [
            // required
            [['boss_fio', 'boss_phone', 'boss_email',
              'worker_fio', 'worker_phone', 'worker_email',
              'notif_order_phone', 'notif_order_emails',
              'office_phone', 'office_address', 'office_route'], 'required', 'on' => self::SCENARIO_DEFAULT],
    
            [['boss_fio', 'boss_phone', 'boss_email'], 'required', 'on' => self::SCENARIO_ADMIN],

            
            // base
            [['camp_id'], 'integer'],

            [['boss_fio', 'boss_phone', 'boss_email',
              'worker_fio', 'worker_phone', 'worker_email',
              'notif_order_phone', 'office_phone', 'office_mobile', 'office_coords',
              'social_vk', 'social_ok', 'social_fb', 'social_ig', 'site_url'], 'string', 'max' => 100],

            [['boss_phone', 'worker_phone', 'notif_order_phone', 'office_phone'], 'string', 'min' => 10],

            [['office_address'], 'string', 'max' => 200],
            [['office_route'], 'string', 'max' => 500],
            [['notif_order_emails'], 'string', 'max' => 1000],

            [['boss_email', 'worker_email'], 'email'],
            [['notif_order_emails_f'], 'each', 'rule' => ['email', 'message' => '{value} не является корректным Email-адресом']],

            [['social_vk', 'social_ok', 'social_fb', 'social_ig', 'site_url'], 'url'],

            [['office_coords_f'], 'each', 'rule' => ['number']],
        ];
    }
    
    public function beforeValidate()
    {
        foreach (['boss_phone', 'worker_phone', 'notif_order_phone', 'office_phone'] AS $field) {
            $this->{$field} = Normalize::clearPhone($this->{$field});
        }
                
        $this->boss_phone = Normalize::clearPhone($this->boss_phone);
        $this->worker_phone = Normalize::clearPhone($this->worker_phone);
        $this->office_phone = Normalize::clearPhone($this->office_phone);
        $this->office_mobile = Normalize::clearPhone($this->office_mobile);
        $this->office_coords = Json::encode($this->office_coords_f);
        $this->notif_order_phone = Normalize::clearPhone($this->office_phone);
        // для валидации каждого емайла
        $this->notif_order_emails_f = explode(',', str_replace(' ', '', $this->notif_order_emails));
        
        return parent::beforeValidate();
    }
    
    public function validate($attributeNames = null, $clearErrors = true)
    {
        $validate = parent::validate($attributeNames, $clearErrors);
        if ($this->hasErrors('notif_order_emails_f')) {
            $this->addError('notif_order_emails', $this->getFirstError('notif_order_emails_f'));
        }
        
        return $validate;
    }
    
    public function afterFind()
    {
        // координаты в массив
        if ($this->office_coords) {
            $this->office_coords_f = Json::decode($this->office_coords);
        }
        
        parent::afterFind(); // TODO: Change the autogenerated stub
    }
    
    
    public function attributeLabels()
    {
        return Normalize::withCommonLabels([
            'boss_fio' => 'ФИО директора',
            'boss_phone' => 'Телефон директора',
            'boss_email' => 'Email директора',
            
            'worker_fio' => 'ФИО сотрудника',
            'worker_phone' => 'Телефон сотрудника',
            'worker_email' => 'Email сотрудника',
            
            'notif_order_emails' => 'Email для уведомлений о брони',
            'notif_order_phone' => 'Номер телефона для уведомлений о брони',
            
            'office_phone' => 'Телефон офиса',
            'office_mobile' => 'Телефон офиса 2',
            'office_address' => 'Адрес офиса',
            'office_route' => 'Маршрут и график',
            
            'office_coords' => 'Координаты офиса',
            'office_coords_f' => 'Координаты офиса',
            
            'social_vk' => 'ВКонтакте',
            'social_ok' => 'Однокласники',
            'social_fb' => 'Facebook',
            'social_ig' => 'Instagram',
            
            'site_url' => 'Сайт компании',
        ]);
    }

    public static function find()
    {
        return new CampsContactsQuery(get_called_class());
    }
}
